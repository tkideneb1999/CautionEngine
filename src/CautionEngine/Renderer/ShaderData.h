#pragma once

#include <CautionDefinitions.h>
#include <d3d12.h>

namespace CautionEngine::Rendering {
	enum CAUTION_CLASS ShaderVariableTypes {
		SHADER_VAR_TYPE_NONE = 0,
		SHADER_VAR_TYPE_UINT = 1,
		SHADER_VAR_TYPE_INT = 2,
		SHADER_VAR_TYPE_FLOAT = 3,
		SHADER_VAR_TYPE_BOOL = 4,
	};

	enum CAUTION_CLASS ShaderStage {
		SHADER_STAGE_VERTEX = 0,
		SHADER_STAGE_HULL = 1,
		SHADER_STAGE_DOMAIN = 2,
		SHADER_STAGE_GEOMETRY = 3,
		SHADER_STAGE_PIXEL = 4,
		SHADER_STAGE_COUNT,
	};

	enum CAUTION_CLASS ShaderModel {
		SHADER_MODEL_6_0 = 0,
		SHADER_MODEL_6_1 = 1,
		SHADER_MODEL_6_2 = 2,
		SHADER_MODEL_6_3 = 3,
		SHADER_MODEL_6_4 = 4,
		SHADER_MODEL_6_5 = 5,
		SHADER_MODEL_6_6 = 6,
	};

	enum CAUTION_CLASS ShaderInputSemantic {
		SHADER_INPUT_NONE,
		SHADER_INPUT_POSITION,
		SHADER_INPUT_NORMAL,
		SHADER_INPUT_COLOR,
		SHADER_INPUT_TANGENT,
		SHADER_INPUT_BITANGENT,
		SHADER_INPUT_TEXCOORD,
	};

	enum CAUTION_CLASS ShaderFillMode {
		SHADER_FILL_WIREFRAME = D3D12_FILL_MODE_WIREFRAME,
		SHADER_FILL_SOLID = D3D12_FILL_MODE_SOLID,
	};

	enum CAUTION_CLASS ShaderCullMode {
		SHADER_CULL_NONE = D3D12_CULL_MODE_NONE,
		SHADER_CULL_FRONT = D3D12_CULL_MODE_FRONT,
		SHADER_CULL_BACK = D3D12_CULL_MODE_BACK,
	};

	enum CAUTION_CLASS ShaderTopologyType{
		SHADER_TOPOLOGY_POINT = D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT,
		SHADER_TOPOLOGY_LINE = D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE,
		SHADER_TOPOLOGY_TRIANGLE = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE,
		SHADER_TOPOLOGY_PATCH = D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH,
	};

	enum CAUTION_CLASS ShaderBlendType {
		SHADER_BLEND_ZERO = D3D12_BLEND_ZERO,
		SHADER_BLEND_ONE = D3D12_BLEND_ONE,
		SHADER_BLEND_SRC_COLOR = D3D12_BLEND_SRC_COLOR,
		SHADER_BLEND_INV_SRC_COLOR = D3D12_BLEND_INV_SRC_COLOR,
		SHADER_BLEND_SRC_ALPHA = D3D12_BLEND_SRC_ALPHA,
		SHADER_BLEND_INV_SRC_ALPHA = D3D12_BLEND_INV_SRC_ALPHA,
		SHADER_BLEND_DEST_ALPHA = D3D12_BLEND_DEST_ALPHA,
		SHADER_BLEND_INV_DEST_ALPHA = D3D12_BLEND_INV_DEST_ALPHA,
		SHADER_BLEND_DEST_COLOR = D3D12_BLEND_DEST_COLOR,
		SHADER_BLEND_INV_DEST_COLOR = D3D12_BLEND_INV_DEST_COLOR,
		SHADER_BLEND_SRC_ALPHA_SAT = D3D12_BLEND_SRC_ALPHA_SAT,
		SHADER_BLEND_BLEND_FACTOR = D3D12_BLEND_BLEND_FACTOR,
		SHADER_BLEND_INV_BLEND_FACTOR = D3D12_BLEND_INV_BLEND_FACTOR,
		SHADER_BLEND_SRC1_COLOR = D3D12_BLEND_SRC1_COLOR,
		SHADER_BLEND_INV_SRC1_COLOR = D3D12_BLEND_INV_SRC1_COLOR,
		SHADER_BLEND_SRC1_ALPHA = D3D12_BLEND_SRC1_ALPHA,
		SHADER_BLEND_INV_SRC1_ALPHA = D3D12_BLEND_INV_SRC1_ALPHA,
	};

	enum CAUTION_CLASS ShaderBlendOpType {
		SHADER_BLEND_OP_ADD = D3D12_BLEND_OP_ADD,
		SHADER_BLEND_OP_SUBTRACT = D3D12_BLEND_OP_SUBTRACT,
		SHADER_BLEND_OP_REV_SUBTRACT = D3D12_BLEND_OP_REV_SUBTRACT,
		SHADER_BLEND_OP_MIN = D3D12_BLEND_OP_MIN,
		SHADER_BLEND_OP_MAX = D3D12_BLEND_OP_MAX,
	};

	enum CAUTION_CLASS ShaderLogicOpType {
		SHADER_LOGIC_OP_CLEAR = D3D12_LOGIC_OP_CLEAR,
		SHADER_LOGIC_OP_SET = D3D12_LOGIC_OP_SET,
		SHADER_LOGIC_OP_COPY = D3D12_LOGIC_OP_COPY,
		SHADER_LOGIC_OP_COPY_INVERTED = D3D12_LOGIC_OP_COPY_INVERTED,
		SHADER_LOGIC_OP_NOOP = D3D12_LOGIC_OP_NOOP,
		SHADER_LOGIC_OP_INVERT = D3D12_LOGIC_OP_INVERT,
		SHADER_LOGIC_OP_AND = D3D12_LOGIC_OP_AND,
		SHADER_LOGIC_OP_NAND = D3D12_LOGIC_OP_NAND,
		SHADER_LOGIC_OP_OR = D3D12_LOGIC_OP_OR,
		SHADER_LOGIC_OP_NOR = D3D12_LOGIC_OP_NOR,
		SHADER_LOGIC_OP_XOR = D3D12_LOGIC_OP_XOR,
		SHADER_LOGIC_OP_EQUIV = D3D12_LOGIC_OP_EQUIV,
		SHADER_LOGIC_OP_AND_REVERSE = D3D12_LOGIC_OP_AND_REVERSE,
		SHADER_LOGIC_OP_AND_INVERTED = D3D12_LOGIC_OP_AND_INVERTED,
		SHADER_LOGIC_OP_OR_REVERSE = D3D12_LOGIC_OP_OR_REVERSE,
		SHADER_LOGIC_OP_OR_INVERTED = D3D12_LOGIC_OP_OR_INVERTED,
	};

	struct ShaderInput {
		ShaderInputSemantic semantic;
		unsigned short int semanticIndex;
		ShaderVariableTypes type;
		unsigned short int amount;
	};

	struct CAUTION_CLASS ShaderConstantBuffer {
		const char* name;
		D3D12_ROOT_PARAMETER1 rootData;
	};

	struct CAUTION_CLASS BlendInfo {
		bool useBlend = false;
		bool useLogicalOp = false;

		ShaderBlendType srcBlend = SHADER_BLEND_SRC_ALPHA;
		ShaderBlendType destBlend = SHADER_BLEND_INV_SRC_ALPHA;
		ShaderBlendOpType blendOp = SHADER_BLEND_OP_ADD;

		ShaderBlendType srcBlendAlpha = SHADER_BLEND_SRC_ALPHA;
		ShaderBlendType destBlendAlpha = SHADER_BLEND_DEST_ALPHA;
		ShaderBlendOpType blendOpAlpha = SHADER_BLEND_OP_ADD;

		ShaderLogicOpType logicOp = SHADER_LOGIC_OP_CLEAR;
		UINT8 RenderTargetWriteMask = 0;
	};

	struct PSOInfo
	{
		ShaderFillMode fillMode = SHADER_FILL_SOLID;
		ShaderCullMode cullMode = SHADER_CULL_BACK;
		ShaderTopologyType topologyType = SHADER_TOPOLOGY_TRIANGLE;
		bool useConservativeRaster = false;
		bool useIndependentBlend = false;
		BlendInfo blendInfos[8];
	};
}